import numpy as np

Rcon = [
"0x8d", "0x01", "0x02", "0x04", "0x08", "0x10", "0x20", "0x40", "0x80", "0x1b", "0x36", "0x6c", "0xd8", "0xab", "0x4d", "0x9a", 
"0x2f", "0x5e", "0xbc", "0x63", "0xc6", "0x97", "0x35", "0x6a", "0xd4", "0xb3", "0x7d", "0xfa", "0xef", "0xc5", "0x91", "0x39", 
"0x72", "0xe4", "0xd3", "0xbd", "0x61", "0xc2", "0x9f", "0x25", "0x4a", "0x94", "0x33", "0x66", "0xcc", "0x83", "0x1d", "0x3a", 
"0x74", "0xe8", "0xcb", "0x8d", "0x01", "0x02", "0x04", "0x08", "0x10", "0x20", "0x40", "0x80", "0x1b", "0x36", "0x6c", "0xd8", 
"0xab", "0x4d", "0x9a", "0x2f", "0x5e", "0xbc", "0x63", "0xc6", "0x97", "0x35", "0x6a", "0xd4", "0xb3", "0x7d", "0xfa", "0xef", 
"0xc5", "0x91", "0x39", "0x72", "0xe4", "0xd3", "0xbd", "0x61", "0xc2", "0x9f", "0x25", "0x4a", "0x94", "0x33", "0x66", "0xcc", 
"0x83", "0x1d", "0x3a", "0x74", "0xe8", "0xcb", "0x8d", "0x01", "0x02", "0x04", "0x08", "0x10", "0x20", "0x40", "0x80", "0x1b", 
"0x36", "0x6c", "0xd8", "0xab", "0x4d", "0x9a", "0x2f", "0x5e", "0xbc", "0x63", "0xc6", "0x97", "0x35", "0x6a", "0xd4", "0xb3", 
"0x7d", "0xfa", "0xef", "0xc5", "0x91", "0x39", "0x72", "0xe4", "0xd3", "0xbd", "0x61", "0xc2", "0x9f", "0x25", "0x4a", "0x94", 
"0x33", "0x66", "0xcc", "0x83", "0x1d", "0x3a", "0x74", "0xe8", "0xcb", "0x8d", "0x01", "0x02", "0x04", "0x08", "0x10", "0x20", 
"0x40", "0x80", "0x1b", "0x36", "0x6c", "0xd8", "0xab", "0x4d", "0x9a", "0x2f", "0x5e", "0xbc", "0x63", "0xc6", "0x97", "0x35", 
"0x6a", "0xd4", "0xb3", "0x7d", "0xfa", "0xef", "0xc5", "0x91", "0x39", "0x72", "0xe4", "0xd3", "0xbd", "0x61", "0xc2", "0x9f", 
"0x25", "0x4a", "0x94", "0x33", "0x66", "0xcc", "0x83", "0x1d", "0x3a", "0x74", "0xe8", "0xcb", "0x8d", "0x01", "0x02", "0x04", 
"0x08", "0x10", "0x20", "0x40", "0x80", "0x1b", "0x36", "0x6c", "0xd8", "0xab", "0x4d", "0x9a", "0x2f", "0x5e", "0xbc", "0x63", 
"0xc6", "0x97", "0x35", "0x6a", "0xd4", "0xb3", "0x7d", "0xfa", "0xef", "0xc5", "0x91", "0x39", "0x72", "0xe4", "0xd3", "0xbd", 
"0x61", "0xc2", "0x9f", "0x25", "0x4a", "0x94", "0x33", "0x66", "0xcc", "0x83", "0x1d", "0x3a", "0x74", "0xe8", "0xcb"
]


def rotWord(x): 
    new_arr = np.roll(x,-1)
    return new_arr



def genRoundKey(orig, rotword, roundNr, xorRcon=False):
    out = []
    for x in range(len(orig)):
        if(x == 0):
            valOrig = int(orig[x], 16)
            valRot = int(rotword[x],16)
            valRcon = int(Rcon[roundNr], 16)
            if(xorRcon):
                roundKey = hex((valOrig^valRot)^valRcon)
            else:
                roundKey = hex(valOrig^valRot)
            out.append(roundKey)
        else:
            valOrig = int(orig[x], 16)
            valRot = int(rotword[x],16)
            valRcon = int("0x00", 16)
            if(xorRcon):
                roundKey = hex((valOrig^valRot)^valRcon)
            else:
                roundKey = hex(valOrig^valRot)
            out.append(roundKey)
    
    return out
    

def stackBeginningKey(array):
    new_arr = []
    
    for x in range(0,len(array), 4):
        new_arr.append([array[x], array[x+1], array[x+2], array[x+3]])
    
    return np.array(new_arr)
    

def keyScheduler(startKey):
    keyColumns = stackBeginningKey(startKey)
    
    genRound = []
    
    for x in range(4):
        if(x == 0):          
            res_rotWord = rotWord(keyColumns[-1])
            res_genRound = genRoundKey(keyColumns[x], res_rotWord, 1, xorRcon=True)
            genRound.append(res_genRound)
        else:
            res_genRound = genRoundKey(keyColumns[x], genRound[-1], 1, xorRcon=False)
            genRound.append(res_genRound)
            
    np_GEN = np.array(genRound).reshape((4,4)).T
    return np_GEN

    
        

key = "2B 7E 15 16 28 AE D2 A6 AB F7 15 88 09 CF 4F 3C".split(" ")

keys = keyScheduler(key)
print("Generert runden√∏kler, kolonner er ord:")
print(keys)

